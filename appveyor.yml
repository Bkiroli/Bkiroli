image: Visual Studio 2019

branches:
  only:
    - master
    - ^v.*

version: '3.12.99.${build}'

environment:
  ARTIFACT_CONFIGURATION_SLUG: initial
  SIGNPATH_SIGNING_POLICY_SLUG: test-signing

  matrix:
    - job_name: x86
      PLATFORM: x86
      ARCHITECTURE: amd64_x86
      VCVARSALL: '%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat'

    - job_name: x64
      PLATFORM: x64
      ARCHITECTURE: amd64
      VCVARSALL: '%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat'

init:
  - call "%VCVARSALL%" %ARCHITECTURE%

install:
  - ps: ./.github/appveyor/install.ps1

build_script:
  # Patch CMakeLists.txt and WiX Toolset Variables
  - ps: |
      cd $env:APPVEYOR_BUILD_FOLDER
      git apply .github\patch\CMakeLists.txt.patch
      git apply .github\patch\product.wxs.patch
      git apply .github\patch\translations.wxs.patch
      git apply .github\patch\variables.wxi.patch

  # Configure build (SQLite)
  - ps: |
      cd $env:APPVEYOR_BUILD_FOLDER
      if ($env:job_name -eq "x86") {
        mkdir release-sqlite; cd release-sqlite;
        cmake -G "Visual Studio 16 2019" -A "Win32" ..
      } else {
        mkdir release-sqlite; cd release-sqlite;
        cmake -G "Visual Studio 16 2019" ..
      }
      # FIXME: Oddly enough, you need to run any command after the 'cmake' command for the build command to work properly.
      dir

  # Build (SQLite)
  - ps: devenv /Build Release sqlitebrowser.sln /Project ALL_BUILD

  # Configure build (SQLCipher)
  - ps: |
      cd $env:APPVEYOR_BUILD_FOLDER
      if ($env:job_name -eq "x86") {
        mkdir release-sqlcipher; cd release-sqlcipher;
        cmake -G "Visual Studio 16 2019" -A "Win32" -Dsqlcipher=1 ..
      } else {
        mkdir release-sqlcipher; cd release-sqlcipher;
        cmake -G "Visual Studio 16 2019" -Dsqlcipher=1 ..
      }
      # FIXME: Oddly enough, you need to run any command after the 'cmake' command for the build command to work properly.
      dir

  # Build (SQLCipher)
  - ps: |
      devenv /Build Release sqlitebrowser.sln /Project ALL_BUILD
      mv "Release\DB Browser for SQLite.exe" "Release\DB Browser for SQLCipher.exe"
    
  # Create MSI
  - ps: |
      cd $env:APPVEYOR_BUILD_FOLDER/installer/windows
      $env:ExePath = $env:APPVEYOR_BUILD_FOLDER
      if ($env:job_name -eq "x86") {
        $env:OpenSSLPath = "C:\dev\OpenSSL-Win32"
        $env:Qt5Path = "C:\Qt\5.15.2\msvc2019"
        $env:SQLCipherPath = "C:\dev\SQLCipher-Win32"
        $env:SQLitePath = "C:\dev\SQLite-Win32"
        ./build.cmd win32
      } else {
        $env:OpenSSLPath = "C:\dev\OpenSSL-Win64"
        $env:Qt5Path = "C:\Qt\5.15.2\msvc2019_64"
        $env:SQLCipherPath = "C:\dev\SQLCipher-Win64"
        $env:SQLitePath = "C:\dev\SQLite-Win64"
        ./build.cmd win64
      }

artifacts:
  - path: installer\windows\DB.Browser.for.SQLite-*.msi

deploy:
  - provider: Webhook
    url: https://app.signpath.io/API/v1/557f82e5-df27-4576-b47d-abd87746eb52/Integrations/AppVeyor?ProjectSlug=sqlitebrowser&SigningPolicySlug=%SIGNPATH_SIGNING_POLICY_SLUG%&ArtifactConfigurationSlug=%ARTIFACT_CONFIGURATION_SLUG%
    authorization:
      secure: Tv+BreRZNAzfrYa8CtG+9i/i74oi1TT1kCEYg6P/qyZuRi/5y6VLDR5v7R+Lf1BlXDDzbC1CIxheJ6oDM3bccQ==

notifications:
  - provider: Email
    to:
      - sqlitebrowser-appveyor@lucydodo.com
    subject: '[AppVeyor-sqlitebrowser/sqlitebrowser] Build {{status}}'
